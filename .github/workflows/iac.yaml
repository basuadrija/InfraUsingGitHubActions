# Workflow Name
#New line added
name: "infra-gitops"

# Workflow Triggers
on:
  push:
    branches:
      - main
    paths:  
      - terraform/**
  workflow_dispatch: # Enables manual trigger for destroy job

# Environment Variables
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: ${{ vars.S3_BUCKET }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  DYNAMODB_TABLE: ${{ vars.DYNAMODB_TABLE }}

# Define Jobs
#New line added
jobs:
  terraform:
    name: "Deploy Infra with Terraform on AWS"
    runs-on: ubuntu-latest
    # Run only on push events
    if: github.event_name == 'push'  

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 Bucket (if not exists)
        run: |
          if ! aws s3api head-bucket --bucket $S3_BUCKET 2>/dev/null; then
            echo "Creating S3 bucket..."
            aws s3api create-bucket \
              --bucket $S3_BUCKET \
              --region $AWS_REGION \
              --create-bucket-configuration LocationConstraint=$AWS_REGION
          else
            echo "S3 bucket already exists."
          fi

      - name: Create DynamoDB Table (if not exists)
        run: |
          if ! aws dynamodb describe-table --table-name $DYNAMODB_TABLE --region $AWS_REGION >/dev/null 2>&1; then
            echo "Creating DynamoDB table..."
            aws dynamodb create-table \
              --table-name $DYNAMODB_TABLE \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=20,WriteCapacityUnits=20 \
              --region $AWS_REGION
          else
            echo "DynamoDB table already exists."
          fi

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        id: apply
        run: terraform apply -lock=false -auto-approve -input=false -parallelism=1 planfile

      

    #   - name: Get Kubernetes config
    #     id: getconfig
    #     if: steps.apply.outcome == 'success'
    #     run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }} 

    #   - name: Install Helm CLI
    #     if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
    #     run: |
    #         curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    #   - name: Associate IAM OIDC provider
    #     run: |
    #       eksctl utils associate-iam-oidc-provider \
    #       --cluster ${{ env.EKS_CLUSTER }} \
    #       --approve

    #   - name: Add AWS EKS Helm repo
    #     run: |
    #       helm repo add eks https://aws.github.io/eks-charts
    #       helm repo update

    #   - name: Install AWS Load Balancer Controller via Helm
    #     run: |
    #       VPC_ID=$(aws eks describe-cluster \
    #       --name ${{ env.EKS_CLUSTER }} \
    #       --region ${{ env.AWS_REGION }} \
    #       --query "cluster.resourcesVpcConfig.vpcId" \
    #       --output text)

    #       helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
    #         -n kube-system \
    #         --set clusterName=${{ env.EKS_CLUSTER }} \
    #         --set serviceAccount.create=false \
    #         --set serviceAccount.name=aws-load-balancer-controller \
    #         --set region=${{ env.AWS_REGION }} \
    #         --set vpcId=$VPC_ID

    #   - name: Verify ALB Controller Deployment
    #     run: |
    # kubectl rollout status deployment/aws-load-balancer-controller -n kube-system

  
  destroy:
    name: "Destroy Infra on AWS"
    runs-on: ubuntu-latest
    # Only trigger for workflow_dispatch
    if: github.event_name == 'workflow_dispatch'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$S3_BUCKET"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #- name: Get Kubernetes config
        #id: getconfig
        #run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }} 

      #- name: Delete Ingress controller
        #run: kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml

      - name: Empty ECR Repository
        run: |
          REPOSITORY_NAME=${{ vars.ECR_REPO }}
          IMAGES=$(aws ecr list-images --repository-name $REPOSITORY_NAME --query 'imageIds[*]' --output json)
          if [[ "$IMAGES" != "[]" ]]; then
            echo "Deleting images from $REPOSITORY_NAME..."
            aws ecr batch-delete-image --repository-name $REPOSITORY_NAME --image-ids "$IMAGES"
          else
            echo "No images found in $REPOSITORY_NAME."
          fi
      
      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false